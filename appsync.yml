AWSTemplateFormatVersion: "2010-09-09"
Description: Configuraci√≥n de AWS AppSync con DynamoDB como fuente de datos.

Parameters:
  SchemaBucketName:
    Type: String
    Default: ordersappsyncschema
  SchemaFileKey:
    Type: String
    Default: schema5.graphql
  
Resources:
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: OrdersGraphQLApi
      AuthenticationType: API_KEY

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: !Sub "s3://${SchemaBucketName}/${SchemaFileKey}"

  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId

  DynamoDBDataSource0:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DynamoDBSource0
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: Products
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

  DynamoDBDataSource1:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DynamoDBSource1
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: Customers
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

  DynamoDBDataSource2:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DynamoDBSource2
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: Orders
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Products"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Customers"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders"

  ProductsBatchResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      FieldName: getProducts
      TypeName: Query
      DataSourceName: !GetAtt DynamoDBDataSource0.Name  
      RequestMappingTemplate: |
        #set($ids = [])
        #foreach($id in ${ctx.args.ids})
            #set($map = {})
            $util.qr($map.put("id", $util.dynamodb.toString($id)))
            $util.qr($ids.add($map))
        #end

        {
            "version" : "2018-05-29",
            "operation" : "BatchGetItem",
            "tables" : {
                "Products": {
                    "keys": $util.toJson($ids),
                    "consistentRead": true
                }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.data.Products)

  ListProductsQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      FieldName: listProducts
      TypeName: Query
      DataSourceName: !GetAtt DynamoDBDataSource0.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  CustomerQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      FieldName: getCustomer
      TypeName: Query
      DataSourceName: !GetAtt DynamoDBDataSource1.Name  
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  CreateProductMutationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      FieldName: createProduct
      TypeName: Mutation
      DataSourceName: !GetAtt DynamoDBDataSource0.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name),
            "description": $util.dynamodb.toDynamoDBJson($ctx.args.description),
            "category": $util.dynamodb.toDynamoDBJson($ctx.args.category),
            "price": $util.dynamodb.toDynamoDBJson($ctx.args.price),
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  CreateCustomerMutationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      FieldName: createCustomer
      TypeName: Mutation
      DataSourceName: !GetAtt DynamoDBDataSource1.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name),
            "email": $util.dynamodb.toDynamoDBJson($ctx.args.email),
            "address": $util.dynamodb.toDynamoDBJson($ctx.args.address),
            "active": $util.dynamodb.toDynamoDBJson($ctx.args.active)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
